\documentclass{article}
\usepackage{graphicx} % Required for inserting images

\title{Bounty Hunter App - Project Documentation}
\author{Gutter-Bacsi Zsombor}
\date{\today}
\usepackage[a4paper, margin=1in]{geometry}
\newcommand{\tabarrow}[1]{\hspace*{0.5em}\texttt{-->} #1\\}


\begin{document}

\maketitle

\tableofcontents
\newpage

\section{Project Introduction}
\label{sec:intro}
My Project is a Star Wars Bounty Hunters themed simple "trading cards" game-like Android application.
The application is designed  to manage, train, and simulate LOCAL and ONLINE battles between bounty hunters.
The app uses minimalistic style user interface with many activities like: 
\begin{itemize}
    \item Hiring hunters,
    \item Training hunters,
    \item Displaying statistics,
    \item Online and Local battles

\end{itemize}
Data is stored and fetched from JSON files.
\newline Network functionality is used for multiplayer battles

\section{Overview + UML}
\label{sec:uml}
Lets leave this now

\section{Individual Section}
\label{sec:individual}

\subsection{Class: BountyHunter and Statistics}
\label{subsec:classes}
\texttt{BountyHunter.java} is the most basic object in the application. It stores all the properties of a single hunter, including Statistics. Defense against incoming attacks is also calculated here.
\newline \newline Statistics.java contains individual statistics about a hunter that are only required in specific cases so its only added to the hunter when needed.
\subsection{Adapters}
\label{subsec:adapters}
In the Application there are tree Adapters for the tree different CardView item that are presented in RecyclerView components.
\begin{itemize}
    \item BountyHunterAdapter.,
    \item HireableHunterAdapter,
    \item BountyHunterStatisticsAdapter

\end{itemize}
They are very similar in functionality  but they are required to be separet because each Card View has different layout and they show different values.
\subsection{Data Storage: Json files + JsonHelper}
\label{subsec:datastorage}
To ensure data doesn't get lost and can be saved the application uses JSON files.
\begin{itemize}
    \item bountyhunters.json,
    \item mybountyhunters.json,
    \item nothiredbountyhunters.json,
    \item Statistics.json
\end{itemize}
Why 4 instead of one big? :
\newline Sadly, this question came to mind when i was writing this document. The idea behind the 4 json is they all represent different data and this way it felt better separated in my head.
\newline Of course a single JSON would work also.
\newline\newline
\texttt{JsonHelper.java} is used for internal data loading, saving, updating. Contains methods and functions.
\newline e.g.: loading Json, saving Json, updating,and of course phrasing the raw-data, returning the desired BountyHunter or Statistics Object.
\newline\newline Methods \texttt{copyJsonIfNotExists and DONOTUSEcopyJson}: 
\newline These methods are required when Android applications use Json files especially when they need to be modified. It copies the Json file from assets folder to the app's internall storage. \newline Files in assets are read-only.
\newline \texttt{DONOTUSEcopyJson} is not in use but i left it there in case of a "clean run" is required and i want to override all existing files in internal storage.
\newline\newline
Why not Gson?:
\newline
Why phrasing Json manualy instead of using Gson wich phrases object to Json and back? I didn't use it on the course. And manualy phrasing shows the inner working visually rather than a single line like: "\texttt{Gson().toJson(this);}"
\newline \newline Why is it used than?:
\newline For example in BountyHunter.java there are two extra functions toJson() and fromJson(...) they appear in other classes that were not mentioned yet. Simple answer because of network. JsonHelper.java is responible for inner Json related matters (offline). When I started to work on Multiplayer funtionality I had to add additional methods to convert objects into Json and back quickly and simply in order to send them to other devices.
\subsection{Activities}
\label{subsec:activities}

\subsubsection*{Main Activity}
\addcontentsline{toc}{subsubsection}{Main Activity}
\label{subsubsec:main}
This is the Page that Loads when application is launched. Here we have 3 options.
\begin{itemize}
    \item  View Home \tabarrow{ We can see our already hired hunters and manage them.}
    \item View Statistics \tabarrow{ We can see Statistical data of our hired hunters}
    \item Hire New Bounty Hunter \tabarrow{ We can hire new Bounty Hunters}
\end{itemize}
\subsubsection*{Hire Hunter Activity}
\addcontentsline{toc}{subsubsection}{Hire Hunter Activity}
\label{subsubsec:hire}

On this Page we are presented with not hired bounty hunters their name, base stats are presented in a CardView and with the help of radio buttons we can select a single hunter at a time and hire them, meaning they now work for us we can train them and send them into battle.
\newline \newline
\texttt{HireableHunterAdapter.java} is used as a RecyclerView adapter.
\newline \newline
Hunters are loaded from nothiredbountyhunters.json. And uppon hiring they are removed from this file and moved to mybountyhunter.json.
\subsubsection*{Statistics Activity}
\addcontentsline{toc}{subsubsection}{Statistics Activity}
\label{subsubsec:statistic}
On this Page we are presented with two type of data that is loaded in from \texttt{Statistics.json}. 
\newline\newline
\textbf{\textit{Global Statistics}}
this is the top section where we can see: How many hunters were hired, Number of Local \texttt{/} Online Battles, Number of training Sessions of all the hunters.
\newline\newline
\textbf{\textit{Hunter Statistics}}
in this section we have a RecyclerView containing CardView items of Hired hunters we can see thier individual Statistics including wich hunter they defeted and got defeted by. Not hired hunters are not presented here.
\newline \newline
\texttt{BountyHunterStatisticsAdapter.java} is used as a RecyclerView adapter.
\newline \newline
Hunters are loaded from mybountyhunter.json and Statistics.json. So the Bonty Hunter object's Statistic field also gets matched and loaded in. (\texttt{loadBountyHunters(), loadStats(), loadGlobalStats()})

\subsubsection*{Charts}
\addcontentsline{toc}{subsubsection}{Charts}
\label{subsubsec:charts}
Charts can be viewed from Statistics Activity. It shows game statistics using AnyChart-Android.
\newline
There are 3 Pie-charts in connection with Battle Statistics containing information about Online and Local battles. On these charts we can see all bounty hunters (not only the hired) if they have the necessary data:
\begin{itemize}
    \item Win Chart\tabarrow{This chart shows out of all the O/L Battles which hunter won what percentage of them.}
    \item Lose Chart\tabarrow{This chart shows out of all the O/L Battles which hunter lost what percentage of them.}
    \item Battle Chart\tabarrow{This chart shows out of all the O/L Battles which hunter participated at what percentage.}
\end{itemize}


\subsubsection*{Home Activity}
\addcontentsline{toc}{subsubsection}{Home Activity}
\label{subsubsec:home}
This Page is the responsible page to manage our hired hunters. From this point we only deal with hired hunters, loaded from \texttt{mybountyhunter.json}
\newline \newline
\texttt{BountyHunterAdapter.java} is used as a RecyclerView adapter.
\newline In this RecyclerView we can see bounty hunter items. Their picture, name and stats inclduting xp. These stats here now not just their basic stat but their constantly updatated stat wich might come from winning a O/L battle  or from training. 
\newline\newline
Check boxes on the Right Upper corner allowes to select one or multiple hunter.
\newline After one or two hunter selected we can send it/them to train or into Battle.
\subsubsection*{Train Activity}
\addcontentsline{toc}{subsubsection}{Train Activity}
\label{subsubsec:train}
If a single Hunter is selected we can send it to Train. On this page we are presented with our selected hunter and tree option:
\begin{itemize}
    \item Train Melee:\tabarrow{This adds +1 experience and +3 to melee attack and defense stats}
    \item Train Range:\tabarrow{This adds +1 experience and +3 to ranged attack and defense stats}
    \item Train XP:\tabarrow{This adds +5 experience and +1 to melee and ranged attack, defense stats}
\end{itemize}


On this Page we also have a custom Progress bar (\texttt{drawable/greenprogressba.xml} its also used as hp bars) which shows training time (\texttt{ trainingTimier(...)}) in in order to protect against "spam" training. Training time depends on experience level in a way higher experience level means longer training sessions.
\newline

After each Training session the hunters stats are increased and saved as mentioned also the number of training session gets saved in \texttt{Statistics.json} both the total and the individual level number of training sessions.
\newline When we return to Home Activity these updated stats are shown.

\subsubsection*{BattleActivityOLD}
\addcontentsline{toc}{subsubsection}{BattleActivityOLD}
\label{subsubsec:oldbattle}
Finally we arrive to the Part which around the application is designed: The Battle.
\newline \newline Why OLD?:
\newline

When I developed the app I already knew I want Multiplayer functionality, but i had a different idea (unnecessarily complicated) in mind. This way Online and Local Battle would be handled separately thus the need for two Battle Activity. During implemantation i realized handling both Online and Local Battle is essentially the same so no need for two Activity.
\newline So the Old version is here to explain the how the battle works without Multiplayer mod. It is not used but i kept because its easier to explain battle without multiplayer. So when i explain the Actual in use Battle Activity the basics are already explained and I can focus only the added Multiplayer part.
\newline\newline
How Does Simple Battle System works?:
\newline

If two Hunters are selected in Home Activity we can select Battle. 
\newline
When Page is loaded in we are shown the two selected hunter with their respective Hp bars these are same custom bars from Training Activity.
\newline\newline
\texttt{fight()}
\newline

The Battle is turnbase when the single Attack button is pressed \texttt{fight()} is called.
The fighting algoridm figures out whose turn is it (first turn is the hunter with lower id). It designates the "attacker" and "defender" according to whose tun is it. gives a 60 percent chance for the "preferred attack" (melee or ranged) than calculates the damage according to \texttt{BountyHunter.(melee/ranged)Defense(BountyHuner)}. 
\newline

Tempo Damage is if the attacker manages to damage the opponent above a certain threshold (12 or 16) it adds additional (30 or 20 percent) damage.
\newline

After Total Damage is calculated the battle log gets created and added to the Battle Log Text view.
Also the Hp bars and the hp text gets updated according to the damage. 
At the and of round the turns change attacker becomes defender and vice versa.
\newline

In case of defeat: defeat means one of the hunters hp is or goes below zero. THE HUNTER DOES NOT DIE! The defeated gets punished and winner gets rewarded.
\begin{itemize}
    \item \texttt{punishLoser(...)}\tabarrow{hunter gets removed from \texttt{mybountyhunter.json} "becomes unhired" returns to \texttt{nothiredbountyhunter.json} with its original stats meaning it loses all of its pervious training gains and xp. \newline Also in it's statistics into the Defeted by section the winner get's appended and that stays there forever.}
    \item \texttt{rewardWinner(...)}\tabarrow{hunter get's all of it's stats incrased by +10 and gains +3 xp. \newline Also in it's statistics into the Defeted section the loser get's appended and that stays there forever.}
\end{itemize}
\newpage
\section{Network}
\label{sec:network}
\textit{\textbf{Custom Feature X}}
\newline
I wanted to play this game with my friends so i decided as a custom feature I should add multiplayer mod.
\newline I was debating over 3 options:
\begin{itemize}
    \item Bluetooth connection
    \item A cloud platform like firebase
    \item Or direct socket connections (playing over same wi-fi network)
\end{itemize}
Eventually I choose direct socket connection because im already familiar with the two other method I wanted to learn something new.
\subsubsection*{Network Manager}
\addcontentsline{toc}{subsubsection}{Network Manager}
\label{subsubsec:networkmanager}
\texttt{NetworkManager.java} is the base of everything that is related to multiplayer functionality, including service discovery, socket communication, connection status handling, and sending or receiving both game data and \texttt{BountyHunter} objects between devices.
\newline Its a fairly complicated Class so the vide explanation will focus on this more.
\newline\newline
\texttt{NetworkManager} allows two devices to connect locally over the same network using Android’s NSD (Network Service Discovery).
\newline It sets up a server if the device is the host (\texttt{initializeServer()}), or discovers and connects to a host if it's a client (\texttt{discoverAndConnect(...)}).
\newline Once connected, it manages the exchange of messages and hunters (\texttt{sendMessage(...), sendHunter(...), reciveHunterandMessage() }) using sockets, enabling real-time interaction between players during a battle.


\subsubsection*{App}
\addcontentsline{toc}{subsubsection}{App}
\label{subsubsec:app}
What is it Why is it needed?:
\newline

It extends Android's \texttt{Application. NetworkManager} is placed here so different activities can still access the same instance. This is relevant when we are transitioning from \texttt{MultiPlayerSetupActivity} to \texttt{BattaleActivity} If we would declare different N\texttt{tworkManager} instances in both activities that would lead to inconsistent network connection and duplicate instances.
\texttt{setNetworkManager(...)} and \texttt{getNetworkManager(...)} makes this doesn't happen.
\newline\newline
I had to create this class because the mentioned transition always broke the connection and \texttt{BattleActivity} loaded but the connection was lost so the actual battle couldn't start.This also need's to be declared in \texttt{AndroidManifest.xml} on the application level rather than on activity or other level.

\subsubsection*{BattleAttack.java + BattleResult.java}
\addcontentsline{toc}{subsubsection}{BattleAttack.java + BattleResult.java}
\label{subsubsec:battlelogic}

These classes are not very important and the game could easily function without them.
\newline They exist to eas the communication between devices during battle. They are phrased into or from Json messages and sent between devices using \texttt{NetworkManager.sendMessage(...)}. They are the mentioned classes in section \textbf{3.3}. To convert classes into Json and back I use Gson.
\newline\newline
\texttt{BattleAttack.java} is responsible to send the damage, newHp, info about attack type and the names to the other device. Because of randomness in attack type (melee/ranged) I can't let the devices botrh calculate locally I need to calculate only on one device than send the message over.
\newline\newline
\texttt{BattleResult.java} is only sent if one of the hunters got defeated. It contains winner and losers name the last damage and of course the info that the battle is over.
\newline

This just like the Json files could have been handled by a single message class but this way its nice and separated. And later I want to add Spectator mod meaning I can view ongoing battles if I'm on same network. Than it makes sense that attack and result is separated.



\subsubsection*{Multiplayer Setup Activity}
\addcontentsline{toc}{subsubsection}{Multiplayer Setup Activity}
\label{subsubsec:setupactivity}

\subsubsection*{Battle Activity (in use)}
\addcontentsline{toc}{subsubsection}{Battle Activity (in use)}
\label{subsubsec:activebattle}


\section{Layout}
\label{sec:layout}

\section{Videos}
\label{sec:videos}

\section{AI Declaration}
\label{sec:ai}

\section{Overview}
\label{sec:finaloverview}

\end{document}
